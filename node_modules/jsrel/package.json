{
  "author": {
    "name": "SHIN Suzuki",
    "email": "shinout310@gmail.com"
  },
  "name": "jsrel",
  "description": "JavaScript lightweight synchronous RDB",
  "keywords": [
    "database",
    "DB",
    "RDB",
    "relation"
  ],
  "version": "0.1.12",
  "repository": {
    "url": "git://github.com/shinout/jsrel"
  },
  "main": "jsrel.js",
  "scripts": {
    "test": "vows test/*.js"
  },
  "engines": {
    "node": ">=0.6.1"
  },
  "dependencies": {
    "sortedlist": ">=0.2.8"
  },
  "devDependencies": {
    "vows": ">=0.6.2",
    "linestream": ">=0.3.2"
  },
  "optionalDependencies": {},
  "readme": "JSRel\n=========\n\ndescription\n------------\nJavaScript synchronous RDB (Relational database) without SQL\n\nAvailable in modern browsers and Node.js.\n\nAPI at a glance\n----------------\nFirst, define the schema\n\n```js\nvar db = JSRel.use(\"dbname\", {schema: \n  { user: { name : true, is_activated: \"on\", $uniques: \"name\"},\n    book: { title: true, price: 1, author: \"user\", $indexes: \"title\" },\n}});\n```\n\nSecond, insert data\n\n```js\nvar u1 = db.ins('user', {name: 'shinout'});\nvar u2 = db.ins('user', {name: 'xxxxx', is_activated: false});\nvar b1 = db.ins('book', {title: 'how to jsrel', price: 10, author: u1});\nvar b2 = db.ins('book', {title: 'JSRel API doc', price: 20, author_id: u1.id});\n```\n\nFind them!\n\n```js\nvar users = db.find('user', {is_activated: true});\n```\n\nGet one!\n\n```js\nvar shinout = db.one('user', {name: \"shinout\"});\n```\n\nGreater Than, Less Equal!\n\n```js\nvar booksGreaterThan5  = db.find('book', { price: {gt: 5} } );\nvar booksLessEqual15   = db.find('book', { price: {le: 15} } );\n```\n\nLike xxx%\n\n```js\nvar booksLikeJS = db.find('book', { title: {like$: \"JS\"} } );\n```\n\nJoin!\n\n```js\nvar usersJoinBooks = db.find('user', {is_activated: true}, {join: \"book\"});\n```\n\nOrderBy! Offset! Limit!\n\n```js\nvar users = db.find('user', null, {order: \"name\", limit : 10, offset : 3} );\n```\n\n\nPerpetuation\n\n```js\ndb.save();\n```\n\nExport / Import\n\n```js\nvar str = db.$export();\n    var newDB = JSRel.$import(\"newID\", str);\n```\n\ndump as SQL!\n\n```js\nvar sql = db.toSQL();\n```\n\nsuitable applications\n---------------------\n\n- rich client applications\n- tiny serverside applications\n- client caching\n- mock DB\n\nNOT suitable for applications which require scalability.\n\n\nmotivation\n-------------\nThinking about the separation of the Model layer.\n\nIf we connect to DB asynchronously, we must handle lots of callbacks in a model method.\n\n```js\nmodel.getUserBooks = function(name, callback) {\n  db.find(\"user\", {name: name}, function(err, users) {\n    db.find(\"book\", {user_id: users[0].id}, callback);\n  });\n};\n```\n\nIf we access to DB synchoronously, we can easily write human-readable model APIs.\n\n```js\nmodel.getUserBooks = function(name) {\n  var user  = db.find(\"user\", {name: \"xxyy\"})[0];\n  return db.find(\"book\", {user_id: user.id});\n};\n```\n\nAlso, synchoronous codes have an advantage of error handling.\n\n###I hate Blocking APIs!###\n\nWhy not making it standalone using WebWorker (browsers) or child_process.fork() (Node.js)?\nThen the whole calculation process doesn't affect the main event loop and we can get the result asynchronously.\n\nI prepared another JavaScript library for this purpose.\n\n[standalone](https://github.com/shinout/standalone).\n\nThen, we can access model methods like\n\n```js\nmodel.getUserBooks(\"user01\", function(err, result) {\n})\n```\n\nby defining\n\n```js\nmodel.getUserBooks = function(name) {\n  var user  = db.find(\"user\", {name: \"xxyy\"})[0];\n  if (!user) return [];\n  return db.find(\"book\", {user_id: user.id});\n};\n```\n\nThat is, try/catch and asynchronous APIs are automatically created via [standalone](https://github.com/shinout/standalone).\n\nSee **make it standalone** for detailed usage.\n\n\ninstallation\n-------------\n\n```bash\n    $ npm install jsrel\n```\n\nWhen using in modern browsers, \n\n```html\n<script type=\"text/javascript\" src=\"/path/to/SortedList.js\"></script>\n<script type=\"text/javascript\" src=\"/path/to/jsrel.js\"></script>\n```\n\nIn Node.js,\n\n```js\nvar JSRel = require('jsrel');\n```\n\nis the way to load the library.\n\nIn browsers, the variable \"JSRel\" is set to global.\n\nIn Web Worker,\n\n```js\nimportScripts('/pathto/SortedList.js', '/pathto/jsrel.js');\n```\n\nSee also **make it standalone**.\n\ndependencies\n-------------\nJSRel internally uses **[SortedList](https://github.com/shinout/SortedList)**\nWhen installed with npm, it is automatically packed to node_modules/sortedlist\nOtherwise, you must install it via github.\n\n\nJSRel API documentation\n-------------------------\n\n**JSRel**\n\n- JSRel.use(uniqId, options)\n- JSRel.$import(uniqId, data_str, options)\n- JSRel.uniqIds\n- JSRel.isNode\n- JSRel.isBrowser\n\n\n**instance of JSRel (jsrel)**\n\n- jsrel.table(tableName)\n- jsrel.save()\n- jsrel.$export()\n- jsrel.toSQL(options)\n- jsrel.id\n- jsrel.name\n- jsrel.tables\n\n\n**instance of JSRel Table (table)**\n\n- table.columns\n- table.ins(obj)\n- table.upd(obj, options)\n- table.find(query, options)\n- table.one(id)\n- table.one(query, options)\n- table.del(id)\n- table.del(query)\n\n\n**shortcut**\n\n- jsrel.ins(tableName, ...)\n- jsrel.upd(tableName, ...)\n- jsrel.find(tableName, ...)\n- jsrel.one(tableName, ...)\n- jsrel.del(tableName, ...)\n\n\n### JSRel.use(uniqId, options) ###\nCreates instance if not exist.\nGets previously created instance if already exists.\n\n**uniqId** is the identifier of the instance, used for storing the data to external system (file system, localStorage and so on).\n**options** is as follows.\n<table>\n<tr><th>key</th>\n<td>type</td>\n<td>required?</td>\n<td>description</td>\n<td>example</td></tr>\n\n<tr><th>storage</th>\n<td>string</td>\n<td>no</td>\n<td>type of external storages. oneof \"mock\", file\" \"local\" \"session\"<br>\nWhen running in Node.js, \"file\" is set by default.<br>\nuniqId is the path name to save the data to.\nWhen running in browsers, \"local\" is set by default.<br>\nlocal means \"localStorage\", session means \"sessionStorage\".\nWhen running in Web Worker, \"mock\" is set and no other options can be selected.  <br>\n\"mock\" saves nothing. This is limitation of Web Worker which cannot access to Web Storages.\nIn this case, exporting the data to the main thread, we can manually handle and store the data.<br>\n</td>\n<td>\"file\"</td>\n</tr>\n\n<tr><th>schema</th>\n<td>object</td>\n<td>required</td>\n<td>DB schema</td>\n<td>(see <strong>SCHEMA JSON</strong>)</td></tr>\n\n<tr><th>reset</th>\n<td>boolean</td>\n<td>no (default false)</td>\n<td>if true, reset db with the given schema.</td>\n<td>true</td></tr>\n\n<tr><th>autosave</th>\n<td>boolean</td>\n<td>no (default false)</td>\n<td>whether to auto-saving or not</td>\n<td>true</td></tr>\n</table>\n\n#### SCHEMA JSON ####\n\n```js\n{\n  tableName1: tableDescription,\n  tableName2: { \n    columnName1 : columnDescription,\n    columnName2 : columnDescription\n  }\n}\n```\n\n**table description**\n\n<table>\n<tr><td>key</td>\n<td>type</td>\n<td>description</td>\n<td>example</td></tr>\n\n<tr><th>(columnName)</th>\n<td><strong>columnDescription</strong></td>\n<td>column to set.<br>\n<strong>name limitation</strong><br>\nCannot set [id, ins_at, upd_at] as they are already used by default.<br>\nCannot set [$indexes, $uniques, $classes] as they make conflict in schema description.<br>\nCannot set [str, num, bool, on, off] as they make conflict in column description.<br>\nCannot set [join, order, limit, offset, as, where, select, explain] as they make conflict in search options.<br>\nCannot include \",\" or \".\" as it is used in indexing or searching.<br>\nCannot set (RelatedTableName)_id as it is automatically set.<br>\n</td>\n<td>age: \"num\"</td>\n</tr>\n\n<tr><th>$indexes</th>\n<td>Array<Array></td>\n<td>list of indexes. child arrays are lists of columns to make an index.<br>\nIf string given, converted as array with the value<br>\n</td>\n<td>[[\"name\"], [\"firstName\", \"lastName\"]]</td></tr>\n\n<tr><th>$uniques</th>\n<td>Array<Array></td>\n<td>(the same as $indexes, but this means unique index)</td>\n<td>[[\"name\", \"pass\"]]</td></tr>\n\n<tr><th>$classes</th>\n<td>Array<Array></td>\n<td>(the same as $indexes, but this means classified index)</td>\n<td>\"type_num\"</td></tr>\n\n</table>\n\n**column description**\n<table>\n<tr><td>example</td>\n<td>description</td>\n\n<tr><th>{type: \"str\"}</th>\n<td>type is string.\ntype must be one of [\"str\", \"num\", \"bool\", (columnName)]\n</td></tr>\n\n<tr><th>{type: \"str\", required: false}</th>\n<td>type is string, and if not given, null is set.\nrequired option is false by default\n</td></tr>\n\n<tr><th>{type: \"bool\", _default: true}</th>\n<td>type is boolean, and if not given, true is set.</td></tr>\n\n<tr><th>{type: \"num\", required: true}</th>\n<td>type is number, and if not given, an exception is thrown.</td></tr>\n\n<tr><th>\"str\"</th>\n<td>type is string, and not required.</td></tr>\n\n<tr><th>\"num\"</th>\n<td>type is number, and not required.</td></tr>\n\n<tr><th>\"bool\"</th>\n<td>type is boolean, and not required.</td></tr>\n\n<tr><th>true</th>\n<td>type is string, and required.</td></tr>\n\n<tr><th>false</th>\n<td>type is string, and not required.</td></tr>\n\n<tr><th>1</th>\n<td>type is number, and required.</td></tr>\n\n<tr><th>0</th>\n<td>type is number, and not required.</td></tr>\n\n<tr><th>\"on\"</th>\n<td>type is boolean, and default value is true.</td></tr>\n\n<tr><th>\"off\"</th>\n<td>type is boolean, and default value is false.</td></tr>\n\n<tr><th>{type: tableName}</th>\n<td>type is the instance of a record in tableName.<br>\nthe column columnName_id is automatically created.<br>\nWe can set columnName_id instead of columnName in insertion and updating.<br>\nThis column is <strong>required</strong> unless you set required: false.\n</td></tr>\n\n<tr><th>{type: tableName, required: false}</th>\n<td>type is the instance of a record in tableName and not required.<br>\n</td></tr>\n\n<tr><th>tableName</th>\n<td>type is the instance of a record in tableName and <strong>required</strong>.<br>\n</td></tr>\n\n</table>\n\n\n### JSRel.$import(uniqId, data_str, options) ###\nImports **data_str** and creates a new instance with **uniqId**.\n**data_str** must be a stringified JSON generated by **jsrel.$export()**.\n\nif **options.force** is true, overrides already-existing database,\notherwise throws an exception.\n\nReturns instance of JSRel.\n\nAs \"import\" is a reserved word in JavaScript, used \"$import\" instead.\n\n\n### JSRel.free(uniqId) ###\nFree the region of database **uniqId**.\n\n\n### JSRel.isNode ###\n(ReadOnly boolean) if Node.js, true.\n\n\n### JSRel.isBrowser ###\n(ReadOnly boolean) if the executing environment has \"localStorage\" and \"sessionStorage\" in global scope, true.\n\n\ninstanceof JSRel (shown as jsrel)\n------\n### jsrel.table(tableName) ###\nReturns a table object whose name is **tableName** (registered from the schema).\nIf absent, throws an exception.\n\n\n### jsrel.save() ###\nSaves current data to the storage.\nReturns **jsrel**\n\n### jsrel.$export() ###\n\nExports current data as the format above.\nReturns data.\n\nAs \"export\" is a reserved word in JavaScript, used \"$export\" instead.\n\n### jsrel.toSQL(options) ###\nGets SQL string from the current schema and data.\n\n**options**\n\n<table>\n<tr><th>option name</th>\n<td>type</td>\n<td>description</td>\n<td>default</td>\n<td>example</td></tr>\n\n<tr><th>noschema</th>\n<td>boolean</td>\n<td>if true, schema SQLs (create statements) are not generated.</td>\n<td>null</td>\n<td>true</td>\n</tr>\n\n<tr><th>nodrop</th>\n<td>boolean</td>\n<td>if true, drop statements are not generated.</td>\n<td>null</td>\n<td>true</td>\n</tr>\n\n<tr><th>nodata</th>\n<td>boolean</td>\n<td>if true, data SQLs (insert statements) are not generated.</td>\n<td>null</td>\n<td>true</td>\n</tr>\n\n<tr><th>type</th>\n<td>string</td>\n<td>type of RDBs. Currently, \"mysql\" is only tested.</td>\n<td>\"mysql\"</td>\n<td>\"mysql\"</td>\n</tr>\n\n<tr><th>engine</th>\n<td>string</td>\n<td>MySQL engine (only enabled when options.type is \"mysql\")</td>\n<td>\"InnoDB\"</td>\n<td>\"MyISAM\"</td>\n</tr>\n\n<tr><th>rails (unstable)</th>\n<td>boolean</td>\n<td>if true, rails-like date format (created_at, inserted_at) is output.</td>\n<td>null</td>\n<td>true</td>\n</tr>\n\n</table>\n\n### jsrel.id ###\n(ReadOnly) gets id\n\n\n### jsrel.name ###\n(ReadOnly) gets name\n\n\n### jsrel.tables ###\n(ReadOnly) gets list of registered tables\n\n```js\n[table1, table2, ...]\n```\n\n\ninstanceof JSRel.Table (shown as table)\n------\n### table.columns ###\n(ReadOnly) gets registered columns in the table\n\n    [column1, column2, ...]\n\n### table.ins(obj) ###\nRegisters a new record.\n**obj** must be compatible with columns of the table.\nOtherwise it throws an exception.\nReturns an instance of the record.\nIt is NOT the same as the given argument, as the new object contains \"id\".\n\nBefore insertion, Type checking is performed.\nJSRel tries to cast the data.\n\n\n#### record object ####\nRecord objects have all columns registered in the table.\n\nIn addition, they have **id**, **ins_at**, **upd_at** in their key.\nThese are all automatically set.\n\n**ins_at** and **upd_at** are timestamp values and cannot be inserted.\n\n**id** is auto-incremented unique integer.\n\nWe can specify **id** in insertion.\n    \n```js\ntable.ins({id: 11, name: \"iPhone\"});\n```\n\nWhen the table already has the same id, an exception is thrown.\n\n\n#### relation handling in insertion ####\nOK, let's think upon the following schema.\n\n```js\nvar schema = { user: {\n    nickName : true,\n    fitstName: false,\n    lastName : false\n  },\n  card: {\n    title : true,\n    body  : true\n  },\n  user_card {\n    user: \"user\",\n    card: \"card\",\n    owner: {type : \"user\", required: false}\n    $uniques: { user_card: [\"user\", \"card\"] }\n  }\n}\n```\n\nFirst, inserts users and cards.\n    \n```js\nvar jsrel = JSRel.use('sample', {schema: schema});\n    \nvar uTable = jsrel.table('user');\nvar shinout = uTable.ins({nickName: \"shinout\"});\nvar nishiko = uTable.ins({nickName: \"nishiko\"});\nvar cTable = jsrel.table('card');\nvar rabbit = uTable.ins({title: \"rabbit\", body: \"It jumps!\"});\nvar pot    = uTable.ins({title: \"pot\", body: \"a tiny yellow magic pot\"});\n```\n\n\nThen, inserts these relations.\n\n```js\nvar ucTable = jsrel.table('user_card');\nucTable.ins({ user: shinout, card: rabbit });\n```\n\n\nWe can also insert these relation like\n\n```js\nucTable.ins({ user_id: nishiko.id, card_id: pot.id });\nucTable.ins({ user_id: 1, card_id: 2 }); // 1: shinout, 2: pot\n```\n\nRemember that user_id and card_id are automatically generated and it represent the id column of each instance.\nWhen we pass an invalid id to these columns, an exception is thrown.\n\n```js\nucTable.ins({ user_id: 1, card_id: 5 }); // 1: shinout, 5: undefined!\n```\n\nWhen a relation column is not required, we can pass null.\n\n```js\nucTable.ins({ user: nishiko, card_id: 1, owner_id: null });\n```\n\nWhen duplicated, **xxxx_id priors to xxxx** (where xxxx is the name of the original column).\n\n```js\nucTable.ins({ user: nishiko, user_id: 1, card_id: 1 }); // user_id => 1\n```\n\n#### inserting relations ####\n\n```js\nobj.rel_table = [relObj1, relObj2, ...];\ntable.ins(obj);\n```\nrelObj1, relObj2 are also inserted to table \"rel_table\" containing the new id as the external key.\n\nIf the main table is related to the **rel_table** multiply,\nyou must specify the column like\n\n```js\nobj[\"rel_table.relcolumn\"] = [relObj1, relObj2, ...];\ntable.ins(obj);\n```\n\n\n### table.upd(obj, options) ###\nUpdates an existing record.\n**obj** must contains **id** key.\nOnly the valid keys (compatible with columns) in **obj** is updated.\nThrows **no** exceptions when you passes invalid keys.\nThrows an exception when you an invalid value with a valid key.\n\nReturns an instance of the updated record.\nIt is NOT the same as the given argument.\n\n#### relation updates ####\n\nupdating related tables\n\n```js\nobj.rel_table = [relObj1, relObj2, ...];\ntable.upd(obj, {append: append});\n```\n\nif **relObj** contains \"id\" column, updating the object.\nOtherwise, inserting the object.\nIf **options.append** is false or not given, already existing related objects are deleted.\n\nIf the main table is related to the **rel_table** multiply,\nyou must specify the column like\n\n```js\nobj[\"rel_table.relcolumn\"] = [relObj1, relObj2, ...];\ntable.upd(obj, {append: append});\n```\n\n\n### table.find(query, options) ###\nSelects records.\nReturns a list of records.\n**query** is an object to describe how to fetch records.\n\n\n#### query examples ####\n<table>\n<tr><td>example</td>\n<td>description</td>\n\n<tr><th>{name: \"shinout\"}</th>\n<td>name must be equal to \"shinout\"</td></tr>\n\n<tr><th>{name: [\"shinout\", \"nishiko\"]}</th>\n<td>name must be equal to \"shinout\" or \"nishiko\"</td></tr>\n\n<tr><th>{name: {like$: \"shin\"}}</th>\n<td>name must be like \"shin%\"</td></tr>\n\n<tr><th>{name: {$like: \"inout\"}}</th>\n<td>name must be like \"%inout\"</td></tr>\n\n<tr><th>{name: [{$like: \"inout\"}, {equal: \"nishiko\"}] }</th>\n<td>name must be like \"%inout\" AND equals \"nishiko\"</td></tr>\n\n<tr><th>{name: {$like: \"inout\", equal: \"nishiko\"} }</th>\n<td>name must be like \"%inout\" AND equals \"nishiko\"</td></tr>\n\n<tr><th>{age: {gt: 24} }</th>\n<td>age must be greater than 24</td></tr>\n\n<tr><th>{age: {gt: 24, le: 40} }</th>\n<td>age must be greater than 24 and less equal 40</td></tr>\n\n<tr><th>{age: [{ge: 24}, {lt: 40}] }</th>\n<td>age must be greater equal 24 or less than 40</td></tr>\n\n<tr><th>{country: {$in: [\"Japan\", \"Korea\"] }</th>\n<td>country must be one of \"Japan\", \"Korea\" (as \"in\" is a reserved word in JavaScript, used \"$in\" instead.)</td></tr>\n\n<tr><th>{name: \"shinout\", age : {ge: 70 }</th>\n<td>must returns empty until shinout becomes 70</td></tr>\n\n</table>\n\n\n**options** is as follows.\n\n<table>\n<tr><th>key</th>\n<td>type</td>\n<td>description</td>\n<td>example</td></tr>\n\n<tr><th>order</th>\n<td>mixed</td>\n<td>see <strong>order description</strong></td>\n<td>{ name: \"asc\" }</td>\n</tr>\n\n<tr><th>limit</th>\n<td>int</td>\n<td>the end position of the data</td>\n<td>20</td></tr>\n\n<tr><th>offset</th>\n<td>int</td>\n<td>offset of the results</td>\n<td>10</td></tr>\n\n<tr><th>join</th>\n<td>mixed</td>\n<td>see <strong>join description</strong></td>\n<td>{records.scene: {title : {like$: \"ABC\"} }</td></tr>\n\n<tr><th>select</th>\n<td>string (one of column names)</td>\n<td>get list of selected columns instead of objects</td>\n<td>\"title\"</td></tr>\n\n<tr><th>select</th>\n<td>array (list of column names)</td>\n<td>get list of object which contains the given columns instead of all columns</td>\n<td>[\"name\", \"age\"]</td></tr>\n\n<tr><th>explain</th>\n<td>object</td>\n<td>put searching information to the given object</td>\n<td>{}</td></tr>\n\n</table>\n\n#### order description ####\n<table>\n<tr><td>example</td>\n<td>description</td>\n\n<tr><th>\"age\"</th>\n<td>order by age asc</td></tr>\n\n<tr><th>{age: \"desc\"}</th>\n<td>order by age desc</td></tr>\n\n<tr><th>{age: \"desc\", name: \"asc\"}</th>\n<td>order by age desc, name asc</td></tr>\n</table>\n\n\n#### results ####\nReturns list of instances\n\n```js\n[ {id: 1, name: \"shinout\"}, {id: 2, name: \"nishiko\"}, ...]\n```\n\n#### join description ####\nsample data\n\n<p>group</p>\n<table>\n<tr><td>id</td><td>name</td></tr>\n<tr><td>1</td><td>mindia</td></tr>\n<tr><td>2</td><td>ZZZ</td></tr>\n</table>\n\n<p>user</p>\n<table>\n<tr><td>id</td><td>name</td><td>age</td><td>group</td></tr>\n<tr><td>1</td><td>shinout</td><td>25</td><td>1</td></tr>\n<tr><td>2</td><td>nishiko</td><td>28</td><td>1</td></tr>\n<tr><td>3</td><td>xxx</td><td>39</td><td>2</td></tr>\n</table>\n\n<p>card</p>\n<table>\n<tr><td>id</td><td>title</td><td>body</td></tr>\n<tr><td>1</td><td>rabbit</td><td>it jumps!</td></tr>\n<tr><td>2</td><td>pot</td><td>a tiny yellow magic pot</td></tr>\n<tr><td>3</td><td>PC</td><td>calculating...</td></tr>\n</table>\n\n<p>user_card</p>\n<table>\n<tr><td>id</td><td>user</td><td>card</td></tr>\n<tr><td>1</td><td>1</td><td>1</td></tr>\n<tr><td>2</td><td>2</td><td>1</td></tr>\n<tr><td>3</td><td>1</td><td>2</td></tr>\n<tr><td>4</td><td>2</td><td>3</td></tr>\n<tr><td>5</td><td>3</td><td>3</td></tr>\n</table>\n\n**Fetching N:1 related objects**\n\n```js\nvar result = db.table('user').find({name: \"shinout\"}, {join: JOIN_VALUE});\n```\n\n<table>\n<tr>\n<td>No.</td>\n<td>JOIN_VALUE</td>\n<td>description</td>\n<td>result</td></tr>\n\n<tr>\n<td>1</td>\n<th>\"group\"</th>\n<td>get \"group\" column as object</td>\n<td>[{id: 1, name: \"shinout\", age: 25, group_id: 1, group: {id: 1, name: \"mindia\"}}]</td>\n</tr>\n\n<tr>\n<td>2</td>\n<th>{group : true}</th>\n<td>get \"group\" column as object (the same as sample1)</td>\n<td>[{id: 1, name: \"shinout\", age: 25, group_id: 1, group: {id: 1, name: \"mindia\"}}]</td>\n</tr>\n\n<tr>\n<td>3</td>\n<th>true</th>\n<td>get all the related columns as object</td>\n<td>[{id: 1, name: \"shinout\", age: 25, group_id: 1, group: {id: 1, name: \"mindia\"}}]</td>\n</tr>\n\n<tr>\n<td>4</td>\n<th>{group : {name: {like$: \"mind\"}}}</th>\n<td>get \"group\" column as object whose name starts at \"mind\"</td>\n<td>[{id: 1, name: \"shinout\", age: 25, group_id: 1, group: {id: 1, name: \"mindia\"}}]</td>\n</tr>\n\n<tr>\n<td>5</td>\n<th>{group : {name: \"ZZZ\"}}</th>\n<td>get \"group\" column as object whose name is equal to \"ZZZ\"</td>\n<td>[] // empty</td>\n</tr>\n</table>\n\n\n**Fetching 1:N related objects**\n\n    var result = db.table('group').find({name: \"mindia\"}, {join: JOIN_VALUE});\n\n<table>\n<tr>\n<td>No.</td>\n<td>JOIN_VALUE</td>\n<td>description</td>\n<td>result</td></tr>\n\n<tr>\n<td>6</td>\n<th>\"user.group\"</th>\n<td>get \"user\" table objects (setting the related column in \"user\" table)</td>\n<td>[{id: 1, name: \"mindia\", \"user.group\": [{id: 1, name: \"shinout\", age: 25}, {id: 2, name: \"nishiko\", age: 28}]}]</td>\n</tr>\n\n<tr>\n<td>7</td>\n<th>\"user\"</th>\n<td>get \"user\" table objects (if related column is obvious)</td>\n<td>[{id: 1, name: \"mindia\", \"user\": [{id: 1, name: \"shinout\", age: 25}, {id: 2, name: \"nishiko\", age: 28}]}]</td>\n</tr>\n\n<tr>\n<td>8</td>\n<th>{\"user.group\" : true }</th>\n<td>get \"user\" table objects (the same as sample6)</td>\n<td>[{id: 1, name: \"mindia\", \"user.group\": [{id: 1, name: \"shinout\", age: 25}, {id: 2, name: \"nishiko\", age: 28}]}]</td>\n</tr>\n\n<tr>\n<td>9</td>\n<th>{\"user.group\" : {age : {gt: 27}} }</th>\n<td>get \"user\" table objects with age greater than 27</td>\n<td>[{id: 1, name: \"mindia\", \"user.group\": [{id: 2, name: \"nishiko\", age: 28}]}]</td>\n</tr>\n\n<tr>\n<td>10</td>\n<th>{\"user.group\" : {age : {gt: 27}, as: \"users\"} }</th>\n<td>get \"user\" table objects with age greater than 27, with alias name \"users\"</td>\n<td>[{id: 1, name: \"mindia\", \"users\": [{id: 2, name: \"nishiko\", age: 28}]}]</td>\n</tr>\n\n<tr>\n<td>11</td>\n<th>{\"user.group\" : {where : {age : {gt: 27}}, as: \"users\"} }</th>\n<td>get \"user\" table objects with age greater than 27, with alias name \"users\" (the canonical expression of sample9)</td>\n<td>[{id: 1, name: \"mindia\", \"users\": [{id: 2, name: \"nishiko\", age: 28}]}]</td>\n</tr>\n\n<tr>\n<td>12</td>\n<th>{user : {age : {gt: 27}, as: \"users\"} }</th>\n<td>get \"user\" table objects with age greater than 27, with alias name \"users\"</td>\n<td>[{id: 1, name: \"mindia\", \"users\": [{id: 2, name: \"nishiko\", age: 28}]}]</td>\n</tr>\n\n<tr>\n<td>13</td>\n<th>{user : {age : {gt: 47}, outer: true} }</th>\n<td>outer joining. Records containing Empty 1:N subqueries can be remained with the column filled with null.</td>\n<td>[{id: 1, name: \"mindia\", \"users\": null}]</td>\n</tr>\n\n<tr>\n<td>13</td>\n<th>{user : {age : {gt: 47}, outer: \"array\"} }</th>\n<td>outer joining. Records containing Empty 1:N subqueries can be remained with the column filled with empty array.</td>\n<td>[{id: 1, name: \"mindia\", \"users\": [] }]</td>\n</tr>\n\n\n</table>\n\n**Fetching N:M related objects**\n\n    var result = db.table('user').find({name: \"shinout\"}, {join: JOIN_VALUE});\n\n<table>\n<tr>\n<td>15</td>\n<th>{\"card\": {via: \"user_card\"} }</th>\n<td>get \"card\" related through \"user_card\"</td>\n<td>[{id: 1, name: \"shinout\", \"card\": [ {id:1, ...}, {id: 3, ...}] }]</td>\n</tr>\n</table>\n\n### table.one(id) ###\nGets one object by id.\n\n### table.one(query, options) ###\nGets one result by **table.find()**.\n\n\n### table.del(id) ###\nDeletes a record with a given **id** .\n\n\n### table.del(query) ###\nDeletes records with a given **query** .\n**query** is the same argument as **table.find(query)**.\n\n\n#### relation handling in deletion ####\nWhen a record is deleted, related records are also deleted.\n\n\nThink upon the schema.\n\nFirst, inserts users, cards and these relations.\n\n```js\nvar jsrel = JSRel.use('sample', {schema: schema});\n\nvar uTable = jsrel.table('user');\nvar cTable = jsrel.table('card');\nvar ucTable = jsrel.table('user_card');\n\nvar shinout = uTable.ins({nickName: \"shinout\"});\nvar nishiko = uTable.ins({nickName: \"nishiko\"});\n\nvar rabbit = uTable.ins({title: \"rabbit\", body: \"It jumps!\"});\nvar pot    = uTable.ins({title: \"pot\", body: \"a tiny yellow magic pot\"});\n\nucTable.ins({ user: shinout, card: rabbit });\nucTable.ins({ user: nishiko, card: rabbit });\nucTable.ins({ user: shinout, card: pot });\n```\n\n\nNext, delete shinout.\n\n```js\nuTable.del(shinout);\n```\n\nThen, the dependent records ( shinout-rabbit, shinout-pot ) are also removed.\n\n```js\nucTable.find().length; // 1 (nishiko-rabbit)\n```\n\n\nshortcut\n--------\n\n- jsrel.ins(tableName, ...)\n- jsrel.upd(tableName, ...)\n- jsrel.find(tableName, ...)\n- jsrel.one(tableName, ...)\n- jsrel.del(tableName, ...)\n\nare, select table via jsrel.table(tableName) in the first place.\nThen run the operation using the remaining arguments.\n\nfor example,\n\n```js\njsre.ins('user', {nickName: \"shinout\"});\n```\n\nis completely equivalent to\n\n```js\njsrel.table('user').ins({nickName: \"shinout\"});\n```\n\n\nmake it standalone\n--------------------\n**[standalone](https://github.com/shinout/standalone)** is a library to make a worker process / thread which can communicate with master.\n\nHere are the basic concept.\n\nmaster.js\n\n```js\nstandalone(\"worker.js\", function(model) {\n\n  model.getSongsByArtist(\"the Beatles\", function(err, songs) {\n    console.log(songs);\n  });\n\n});\n```\n\n\nworker.js\n    \n```js\nvar db = JSRel.use(\"xxx\", {schema: {\n  artist: {name: true},\n  song  : {title: true, artist: \"artist\"}\n}});\nvar btls = db.ins(\"artist\", {name: \"the Beatles\"});\ndb.ins(\"song\", {title: \"Help!\", artist: btls});\ndb.ins(\"song\", {title: \"In My Life\", artist: btls});\n\nvar model = {\n  getSongsByArtist: function(name) {\n    return db.find(\"artist\", {name : name}, {join: \"song\", select : \"song\"});\n  }\n};\nstandalone(model);\n```\n\nIn master.js, we can use \"getSongsByArtist\" asynchronously, catching possible errors in err.\n\nIn Node.js, **standalone** spawns a child process.\n\nIn browsers, **standalone** creates a WebWorker instance.\n\n### environmental specific code ###\n\nBecause Node.js and WebWorker has a different requiring system,\nWe must be careful of loading scripts.\n\n\nin Node.js (worker.js)\n\n```js\nvar JSRel = require('jsrel');\nvar standalone = require('standalone');\n```\n\nThis is enough.\n\nin browsers (worker.js)\n\n```js\nimportScripts('/pathto/SortedList.js', '/pathto/jsrel.js', '/pathto/standalone.js');\n```\n\nDon't forget to import **[SortedList](https://github.com/shinout/SortedList)** (which JSRel depends on). \n\n\nLICENSE\n-------\n(The MIT License)\n\nCopyright (c) 2012 SHIN Suzuki <shinout310@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "jsrel@0.1.12",
  "dist": {
    "shasum": "e8339e0ffd91a70f9f5d41d07cf5fe580b63d6ba"
  },
  "_from": "jsrel"
}
