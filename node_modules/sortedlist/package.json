{
  "name": "sortedlist",
  "version": "0.2.8",
  "description": "sorted list",
  "keywords": [
    "sort",
    "list",
    "bsearch",
    "algorithm"
  ],
  "author": {
    "name": "SHIN Suzuki",
    "email": "shinout310@gmail.com"
  },
  "main": "./SortedList.js",
  "readme": "SortedList\n==========\nsorted list in JavaScript (browsers (ES5 compatible), Node.js)\n\n## Installation ##\n    git clone git://github.com/shinout/SortedList.git\n\n    OR\n\n    npm install sortedlist\n\n## Usage ##\n\n    // sort number\n    var list = SortedList.create();\n    list.insert(13, 2, 9, 8, 0);\n    console.log(list.toArray()); // [0,2,8,9,13]\n\n    // sort string\n    var arr = [\"foo\", \"bar\", \"hoge\"];\n    var strList = SortedList.create(arr, {\n      compare: \"string\"\n    });\n    console.log(strList.toArray()); // [\"bar\", \"foo\", \"hoge\"]\n\n    // SortedList is not Array\n    console.assert(!Array.isArray(list));\n\n    // SortedList is instanceof Array\n    console.assert(list instanceof Array);\n\n    // SortedList extends Array\n    console.assert(list[2], 8);\n    console.assert(list.length, 5);\n    console.assert(list.pop(), 13);\n\n    // register an already filtered array\n    var list = SortedList.create([0,1,2,3,4], { resume: true });\n\n## API Documentation ##\n- SortedList.create(options, arr)\n- sortedList.insertOne(val)\n- sortedList.insert(val1, val2, ...)\n- sortedList.remove(pos)\n- sortedList.unique(createNew)\n- sortedList.bsearch(val)\n- sortedList.key(val)\n- sortedList.keys(val)\n- sortedList.toArray()\n\n\n### SortedList.create(options, arr) ###\ncreate an instance of SortedList.\n\n**options** is option object as follows.\n<table>\n<tr><th>key</th>\n<td>type</td>\n<td>description</td>\n<td>example</td></tr>\n\n<tr><th>unique</th>\n<td>boolean</td>\n<td>filter unique values in insertion.</td>\n<td>true</td>\n</tr>\n\n<tr><th>filter</th>\n<td>function</td>\n<td>\nregister a filtration function which returns boolean indicating valid value, running before insertion.\nBy default, function(v) { returns true }, that is, no filtration.\n</td>\n<td>function (v) { return !isNaN(Number(v) }</td>\n</tr>\n\n<tr><th>compare</th>\n<td>one of \"string\", \"number\"</td>\n<td>\ncomparison function comparing two strings or two numbers asc.<br>\nBy default, \"number\" comparison.\n</td>\n<td>\"number\"</td>\n</tr>\n\n<tr><th>compare</th>\n<td>function</td>\n<td>\na custom comparison function which returns one of [1, 0, -1].<br>\nThe same spec as Array#sort(fn).\nSee <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\">Mozilla official site</a>.\n</td>\n<td>function(a,b) { return a.start - b.start }</td>\n</tr>\n\n<tr><th>resume</th>\n<td>boolean</td>\n<td>\nif true, sets the array given in the second arguments with no filtration\n</td>\n<td>true</td>\n</tr>\n</table>\n\n**arr** is a initial value. All elements are shallowly copied.\n\nReturns an instance of SortedList.\n\n### sortedList.insertOne(val) ###\nInserts **val** to the list. \n\nReturns inserted position if succeeded, false if failed.\n\n\n### sortedList.insert(val1, val2, ...) ###\nInserts **val1** **val2**, ... to the list.\n\nReturns list of the result of executing insertOne(val).\n\n    console.log(SortedList.create().insert(3,1,2,4,5));\n    // [0,0,1,3,4]\n\n### sortedList.remove(pos) ###\nRemoves a value in the position **pos**.\n\nReturns this.\n\n### sortedList.unique(createNew) ###\nMake the list unique.\nIf **createNew** is true, returns a new array.\n\nOtherwise, duplicated elements are internally removed, and this method returns this.\n\n### sortedList.bsearch(val) ###\nExecutes binary search with the given **val**.\nReturns the position before insertion.\n\n    var list = SortedList.create([1,2,4,6,10]);\n    console.log(list.bsearch(4)); // 2\n    console.log(list.bsearch(5)); // 2\n    console.log(list.bsearch(0)); // -1\n    console.log(list.bsearch(12)); // 4\n\n### sortedList.key(val) ###\nIf the given **val** exists, returns the first position.\n\nOtherwise, returns null.\n\n    var list = SortedList.create([1,2,4,4,4,6,10]);\n    console.log(list.key(10)); // 6\n    console.log(list.key(4)); // 2\n    console.log(list.key(5)); // null\n    console.log(list.key(1)); // 0\n\n### sortedList.keys(val) ###\nIf the given **val** exists, returns an array of all the positions with **val**.\n\nOtherwise, returns null.\n\n    var list = SortedList.create([1,2,4,4,4,6,10]);\n    console.log(list.keys(10)); // [4]\n    console.log(list.keys(4)); // [2, 3, 4]\n    console.log(list.keys(5)); // null\n    console.log(list.keys(1)); // [0]\n\n\n### sortedList.toArray() ###\nCreates a new array with this list.\n\n## SortedList extends Array ###\nAs SortedList extends Array, we can use every method in Array.\n\n    var list = SortedList.create([1,2,4,6,10]);\n\n    console.log(list[2]) // 4\n\n    list.forEach(function(total, v) {\n      // ...\n    });\n\n    var newArr = list.map(function(total, v) {\n      // ...\n    });\n\nBe careful of these differences.\n\n    Array.isArray(SortedList.create()) // false\n    (SortedList.create()) instanceof Array // true\n",
  "readmeFilename": "README.md",
  "_id": "sortedlist@0.2.8",
  "_from": "SortedList"
}
